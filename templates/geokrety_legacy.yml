---

x-variables: &variables
{% if params.postgres.enable is defined and params.postgres.enable or params.db.enable is defined and params.db.enable %}
    depends_on:
{% if params.postgres.enable is defined and params.postgres.enable %}
      - postgres
{% endif %}
{% if params.db.enable is defined and params.db.enable %}
      - db
{% endif %}
{% endif %}
  environment:
    TIMEZONE: "{{ params.tz | default(geokrety_tz) }}"
{% if params.new_env_flag is defined and params.new_env_flag %}
    GK_SITE_BASE_SERVER_URL: "https://{{ params.website.uri.0 }}"
    GK_SITE_BASE_SERVER_FQDN: "{{ params.website.uri.0 }}"
    GK_SYSTEM_PATH_ALLOWED_IPS: "127.0.0.1,192.168.0.0/16,172.16.0.0/12,10.0.0.0/8,130.180.209.67,82.66.168.93"

    GK_MINIO_SERVER_URL_EXTERNAL: "https://{{ params.minio.uri_external }}"
    MINIO_ACCESS_KEY: "{{ params.minio.access_key }}"
{% if params.pictures_processor is defined %}
    GK_MINIO_PICTURES_PROCESSOR_MINIO_ACCESS_KEY: "{{ params.minio.pictures_processor_downloader_access_key }}"
{% endif %}

    GK_DEBUG: "{{ params.debug is defined and params.debug }}"
    GK_ENVIRONMENT: "{{ params.environment | default(geokrety_params.environment) }}"
    GK_INSTANCE_NAME: "{{ params.name }}"
    GK_DEPLOY_DATE: "{{ ansible_date_time.iso8601_micro }}"

{% if params.sentry.dsn is defined or geokrety_params.sentry.dsn is defined %}
    GK_SENTRY_DSN: "{{ params.sentry.dsn | default(geokrety_params.sentry.dsn) }}"
    GK_SENTRY_ENV: "{{ params.sentry.env | default(geokrety_params.sentry.env) }}"
{% endif %}

{% if params.piwik is defined %}
    GK_PIWIK_URL: "{{ params.piwik.url | default(geokrety_params.piwik.url) }}"
    GK_PIWIK_SITE_ID: "{{ params.piwik.site_id | default(geokrety_params.piwik.site_id) }}"
{% endif %}

    GK_DB_DRIVER: "{{ params.postgres.driver | default(geokrety_params.postgres.driver) }}"
    GK_DB_DSN: "{{ params.postgres.dsn | default(geokrety_params.postgres.dsn) }}"
    GK_DB_HOST: "{{ params.postgres.host | default(geokrety_params.postgres.host) }}"
    GK_DB_NAME: "{{ params.postgres.name | default(geokrety_params.postgres.name) }}"
    GK_DB_USER: "{{ params.postgres.user | default(geokrety_params.postgres.user) }}"
    GK_DB_ORIG_USER: "{{ params.db.user | default(geokrety_params.db.user) }}"
    GK_DB_ORIG_PASSWORD: "{{ params.db.password | default(geokrety_params.db.password) }}"
    GK_DB_ORIG_DB_NAME: "{{ params.db.name | default(geokrety_params.db.name) }}"
    GK_DB_ORIG_HOST: "{{ params.db.host | default(geokrety_params.db.host) }}"

{% if params.basex is defined and params.basex.host is defined %}
    GK_BASEX_HOST: "{{ params.basex.host }}"
    GK_BASEX_PORT: "{{ params.basex.port }}"
    GK_BASEX_USER: "{{ params.basex.user }}"
{% endif %}

{% if params.rabbitmq is defined and params.rabbitmq.host is defined %}
    GK_RABBITMQ_HOST: "{{ params.rabbitmq.host }}"
    GK_RABBITMQ_PORT: "{{ params.rabbitmq.port }}"
    GK_RABBITMQ_USER: "{{ params.rabbitmq.user }}"
    # GK_RABBITMQ_VHOST: "{{ params.rabbitmq.vhost | default('%2F') }}"
{% endif %}

{% if params.mail_subject_prefix is defined %}
    GK_EMAIL_SUBJECT_PREFIX: "{{ params.mail_subject_prefix }}"
{% endif %}

    GK_SITE_EMAIL: "{{ params.mail_email.main | default(geokrety_params.mail_email.main) }}"
    GK_SITE_EMAIL_NOREPLY: "{{ params.mail_email.noreply | default(geokrety_params.mail_email.noreply) }}"
    GK_SITE_EMAIL_NOTIF: "{{ params.mail_email.notif | default(geokrety_params.mail_email.notif) }}"
    GK_SITE_EMAIL_SUPPORT: "{{ params.mail_email.support | default(geokrety_params.mail_email.support) }}"
    GK_SITE_EMAIL_REGISTRATION: "{{ params.mail_email.registration | default(geokrety_params.mail_email.registration) }}"
    GK_SITE_EMAIL_MESSAGE_CENTER: "{{ params.mail_email.message_center | default(geokrety_params.mail_email.message_center) }}"

    GK_SESSION_IN_REDIS: "{{ params.session_in_redis | default(geokrety_params.session_in_redis) }}"
    GK_F3_CACHE: "redis=redis:6379"

    GK_CDN_SERVER_URL: "https://{{ params.cdn.uri | default(geokrety_params.cdn_uri) }}"
    GK_MAP_URL: "{{ params.geokrety_map_url | default(geokrety_params.geokrety_map_url) }}"

    GK_GOOGLE_RECAPTCHA_PUBLIC_KEY: "{{ params.google.recaptcha_public_key | default(geokrety_params.google.recaptcha_public_key) }}"

{% if params.website.help_geokrety_exemples_ids is defined %}
{% for gk_id in params.website.help_geokrety_exemples_ids %}
    GK_HELP_GEOKRETY_EXAMPLE_{{ loop.index }}: "{{ gk_id }}"
{% endfor %}
{% endif %}

{% if params.social_auth is defined %}
{% if params.social_auth.google is defined %}
    GK_OPAUTH_GOOGLE_CLIENT_ID: "{{ params.social_auth.google.client_id }}"
{% endif %}
{% if params.social_auth.facebook is defined %}
    GK_OPAUTH_FACEBOOK_CLIENT_ID: "{{ params.social_auth.facebook.client_id }}"
{% endif %}
{% if params.social_auth.github is defined %}
    GK_OPAUTH_GITHUB_CLIENT_ID: "{{ params.social_auth.github.client_id }}"
{% endif %}
{% if params.social_auth.twitter is defined %}
    GK_OPAUTH_TWITTER_CLIENT_ID: "{{ params.social_auth.twitter.client_id }}"
{% endif %}
{% endif %}
{% if params.website.audit_logs_exclude_path_bypass is defined %}
    GK_AUDIT_LOGS_EXCLUDE_PATH_BYPASS: "{{ params.website.audit_logs_exclude_path_bypass }}"
{% endif %}
{% else %}
    # OBSOLETE: Old entries that will be removed one day (Still in use by branches < new-theme/f3)
    DB_HOSTNAME: "{{ params.db.host | default(geokrety_params.db.host) }}"
    DB_USERNAME: "{{ params.db.user | default(geokrety_params.db.user) }}"
    DB_PASSWORD: "{{ params.db.password | default(geokrety_params.db.password) }}"
    DB_NAME: "{{ params.db.name | default(geokrety_params.db.name) }}"
    DB_CHARSET: "{{ params.db.charset | default(geokrety_params.db.charset) }}"
    PROD_SERVER_NAME: "{{ geokrety_uri }}"
    SERVER_URL: "https://{{ params.website.uri.0 }}/"
    CDN_SERVER_URL: "https://{{ params.cdn.uri | default(geokrety_params.cdn_uri) }}"
    GOOGLE_MAP_KEY: "{{ params.google.map_key | default(geokrety_params.google.map_key) }}"
    GOOGLE_RECAPTCHA_PUBLIC_KEY: "{{ params.google.recaptcha_public_key | default(geokrety_params.google.recaptcha_public_key) }}"
    GOOGLE_RECAPTCHA_SECRET_KEY: "{{ params.google.recaptcha_secret_key | default(geokrety_params.google.recaptcha_secret_key) }}"
    PASSWORD_HASH: "{{ params.password_hash | default(geokrety_params.password_hash) }}"
    PASSWORD_HASH_LEGACY: "{{ params.password_hash_legacy | default(geokrety_params.password_hash_legacy) }}"
    API2LOGIN_MD5_STR1: "{{ params.api2login_md5_str1 | default(geokrety_params.api2login_md5_str1) }}"
    API2LOGIN_MD5_STR2: "{{ params.api2login_md5_str2 | default(geokrety_params.api2login_md5_str2) }}"
    SWISTAK_KEY: "{{ params.swistak_key | default(geokrety_params.swistak_key) }}"
    SWISTAK_IV32: "{{ params.swistak_iv32 | default(geokrety_params.swistak_iv32) }}"
    NEWS_PASSWORD: "{{ params.news_password | default(geokrety_params.news_password) }}"
    EXPORT_BYPASS_TOKEN: "{{ params.export_bypass_token | default(geokrety_params.export_bypass_token) }}"
    JRATING_TOKEN: "{{ params.jrating_token | default(geokrety_params.jrating_token) }}"
    POP_HOSTNAME: "{{ params.pop_hostname | default(geokrety_params.pop_hostname) }}"
    POP_PORT: "{{ params.pop_port | default(geokrety_params.pop_port) }}"
    POP_TLS: "{{ params.pop_tls | default(geokrety_params.pop_tls) }}"
    POP_USERNAME: "{{ params.mail_username | default(geokrety_params.mail_username) }}"
    POP_PASSWORD: "{{ params.mail_password | default(geokrety_params.mail_password) }}"
    SUPPORT_MAIL: "{{ params.mail_email.main | default(geokrety_params.mail_email.main) }}"
    PIWIK_URL: "{{ params.piwik.url | default(geokrety_params.piwik.url) }}"
    PIWIK_SITE_ID: "{{ params.piwik.site_id | default(geokrety_params.piwik.site_id) }}"
    PIWIK_TOKEN: "{{ params.piwik.token | default(geokrety_params.piwik.token) }}"
    GEONAMES_ENDPOINT: "http://api.geonames.org"
    GEONAMES_USERNAME: "{{ params.geonames_username | default(geokrety_params.geonames_username) }}"
    GEOKRETY_MAP_URL: "{{ params.geokrety_map_url | default(geokrety_params.geokrety_map_url) }}"
    OC_PL_OKAPI_CONSUMER_KEY: "{{ params.OKAPI.OC_PL.CONSUMER_KEY | default(geokrety_params.OKAPI.OC_PL.CONSUMER_KEY) }}"
    OC_UK_OKAPI_CONSUMER_KEY: "{{ params.OKAPI.OC_UK.CONSUMER_KEY | default(geokrety_params.OKAPI.OC_UK.CONSUMER_KEY) }}"
    OC_DE_OKAPI_CONSUMER_KEY: "{{ params.OKAPI.OC_DE.CONSUMER_KEY | default(geokrety_params.OKAPI.OC_DE.CONSUMER_KEY) }}"
    OC_US_OKAPI_CONSUMER_KEY: "{{ params.OKAPI.OC_US.CONSUMER_KEY | default(geokrety_params.OKAPI.OC_US.CONSUMER_KEY) }}"
    OC_NL_OKAPI_CONSUMER_KEY: "{{ params.OKAPI.OC_NL.CONSUMER_KEY | default(geokrety_params.OKAPI.OC_NL.CONSUMER_KEY) }}"
    OC_RO_OKAPI_CONSUMER_KEY: "{{ params.OKAPI.OC_RO.CONSUMER_KEY | default(geokrety_params.OKAPI.OC_RO.CONSUMER_KEY) }}"
    SESSION_IN_REDIS: "{{ params.session_in_redis | default(geokrety_params.session_in_redis) }}"
    ENVIRONMENT: "{{ params.environment | default(geokrety_params.environment) }}"
{% endif %}

x-volumes-website: &volumes-website
  volumes:
{% if params.website.localdir is defined %}
    # Mount local dir as html root
    - {{ params.website.localdir }}:/var/www/geokrety/
{% if params.xdebug is defined and params.xdebug %}
    - {{ params.website.localdir }}/docker/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    - {{ params.website.localdir }}/docker/php/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
{% endif %}
{% endif %}
    # Configure mail forwarder
    - {{ geokrety_base_dir }}/ssmtp.conf:/etc/ssmtp/ssmtp.conf:ro
    - {{ geokrety_base_dir }}/data/assets/:/var/www/geokrety/website/public/assets/compressed
{% if params.new_env_flag is not defined or not params.new_env_flag %}
    # persistent vars
    - {{ geokrety_base_dir }}/data/cdn/obrazki/:/var/www/html/obrazki/
    - {{ geokrety_base_dir }}/data/cdn/obrazki-dowonu/:/var/www/html/obrazki-dowonu/
    - {{ geokrety_base_dir }}/data/cdn/obrazki-male/:/var/www/html/obrazki-male/
    - {{ geokrety_base_dir }}/data/cdn/statpics/:/var/www/html/statpics/
    - {{ geokrety_base_dir }}/data/cdn/mapki/:/var/www/html/mapki/
    # generated vars
    - {{ geokrety_base_dir }}/data/cdn/files/:/var/www/html/files/
    - {{ geokrety_base_dir }}/data/cdn/templates/wykresy/:/var/www/html/templates/wykresy/
    - {{ geokrety_base_dir }}/data/cdn/rzeczy/xml/:/var/www/html/rzeczy/xml/
    - {{ geokrety_base_dir }}/data/cdn/mapa-f/:/var/www/html/rzeczy/mapa-f/out/
    - {{ geokrety_base_dir }}/data/cdn/year-stats/:/var/www/html/templates/stats/year/
{% endif %}


{% if params.cdn is defined %}
x-volumes-cdn: &volumes-cdn
  volumes:
{% if params.cdn.localdir is defined %}
    # The cdn data
    - {{ params.cdn.localdir }}/content:/usr/share/nginx/html
{% endif %}
    # Basex full exports
{% if params.basex is defined %}
    - {{ geokrety_base_dir }}/BaseXExports:/usr/share/nginx/html/exports
{% endif %}
{% if params.new_env_flag is not defined or not params.new_env_flag %}
    # persistent vars
    - {{ geokrety_base_dir }}/data/cdn/statpics/:/usr/share/nginx/html/images/statpics/
    - {{ geokrety_base_dir }}/data/cdn/mapki/:/usr/share/nginx/html/mapki/
    - {{ geokrety_base_dir }}/data/cdn/templates/wykresy/:/usr/share/nginx/html/images/wykresy/
    # generated vars
    - {{ geokrety_base_dir }}/data/cdn/files/:/usr/share/nginx/html/files/
    - {{ geokrety_base_dir }}/data/cdn/rzeczy/xml/:/usr/share/nginx/html/rzeczy/xml/
    - {{ geokrety_base_dir }}/data/cdn/mapa-f/:/usr/share/nginx/html/rzeczy/mapa-f/out/
    - {{ geokrety_base_dir }}/data/cdn/year-stats/:/usr/share/nginx/html/templates/stats/year/
{% endif %}
{% endif %}

x-labels-website: &labels-website
  labels:
    traefik.enable: "true"
    traefik.docker.network: "traefik_default"
    traefik.frontend.rule: "Host:{{ params.website.uri | join(',') }}"
    traefik.frontend.passHostHeader: "true"
    traefik.frontend.redirect.regex: www.{{ params.website.uri[0] }}([/](.*))*
    traefik.frontend.redirect.replacement: {{ params.website.uri[0] }}$${1}
    traefik.frontend.redirect.permanent: "true"
    traefik.protocol: "http"
    traefik.port: 80
    # traefik2
    traefik.http.middlewares.geokrety-{{ item }}-redirectregex.redirectregex.regex: "http://www.{{ params.website.uri[0] }}([/](.*))*"
    traefik.http.middlewares.geokrety-{{ item }}-redirectregex.redirectregex.replacement: "https://{{ params.website.uri[0] }}$${1}"
    traefik.http.routers.geokrety-{{ item }}-nginx.priority: 5
    traefik.http.routers.geokrety-{{ item }}-nginx.rule: "Host(`{{ params.website.uri | join('`) || Host(`') }}`) || Host(`www.{{ params.website.uri[0] }}`)"
    traefik.http.routers.geokrety-{{ item }}-nginx.middlewares: X-Forwarded-Https@file, geokrety-{{ item }}-redirectregex
    traefik.http.services.geokrety-{{ item }}-nginx.loadbalancer.passhostheader: "true"
    traefik.http.services.geokrety-{{ item }}-nginx.loadbalancer.server.port: 80

{% if params.new_env_flag is defined and params.new_env_flag %}
    # traefik.backend.healthcheck.path: "/health"
    # traefik.backend.loadbalancer.stickiness: "true"
{% endif %}

services:
{% if params.nginx is defined %}
  nginx:
    image: {{ geokrety_docker_image_nginx_image_name }}:{{ geokrety_docker_image_nginx_image_tag }}
    environment:
      GK_WEBSITE_FQDN: "{{ params.website.uri.0 }}"
    volumes:
{% if params.nginx.localdir is defined %}
      - {{ params.nginx.localdir }}/files/etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - {{ params.nginx.localdir }}/files/etc/nginx/fastcgi_pass:/etc/nginx/fastcgi_pass:ro
      - {{ params.nginx.localdir }}/files/etc/nginx/templates/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - {{ params.nginx.localdir }}/files/var/www/html:/var/www/html:ro
{% endif %}
      - {{ geokrety_base_dir }}/data/assets:/var/www/html/assets/compressed:ro
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
        order: start-first
      <<: *labels-website
      restart_policy:
        condition: any
    healthcheck:
      test: curl -b /tmp/cookie.txt -c /tmp/cookie.txt --fail -v --output /dev/stderr http://localhost:80/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      # start_period: 10s
    networks:
      default:
      traefik_default:
{% endif %}

  website:
    image: {{ geokrety_docker_image_website_image_name }}:{{ geokrety_docker_image_website_image_tag }}
    <<: *variables
    <<: *volumes-website
    deploy:
      restart_policy:
        condition: any
{% if params.nginx is defined %}
      replicas: 1
      update_config:
        parallelism: 1
        delay: 30s
        monitor: 5s
        order: start-first
      labels:
        traefik.enable: "false"
    secrets:
{% for secret_name in geokrety_docker_secrets %}
{% if geokrety_docker_secrets[secret_name] %}
      - {{ item }}__{{ secret_name }}
{% endif %}
{% endfor %}
    healthcheck:
      test: /usr/local/bin/php-fpm-healthcheck -v || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      # start_period: 10s
{% else %}
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        monitor: 60s
        order: start-first
      <<: *labels-website
{% endif %}
{% if geokrety_dns_servers | length %}
    dns:
{% for dns_server in geokrety_dns_servers %}
      - {{ dns_server }}
{% endfor %}
{% endif %}
{% if params.piwik is defined and params.piwik.extra_hosts is defined %}
    extra_hosts:
{% for extra_host in params.website.extra_hosts %}
      - "{{ extra_host }}"
{% endfor %}
{% for extra_host in params.piwik.extra_hosts %}
      - "{{ extra_host }}"
{% endfor %}
{% endif %}
    networks:
      default:
{% if params.nginx is not defined %}
      traefik_default:
{% endif %}

{% if params.db.importer is defined and params.db.importer %}
  db-migrator:
    image: {{ geokrety_docker_image_website_image_name }}:{{ geokrety_docker_image_website_image_tag }}
    <<: *variables
{% if params.website.localdir is defined %}
    volumes:
      # Mount local dir as html root
      - {{ params.website.localdir }}:/var/www/geokrety/
{% endif %}
    command: bash -c "make composer-autoload; tail -F /dev/null"
    deploy:
      restart_policy:
        condition: any
      replicas: 1
      update_config:
        parallelism: 1
        delay: 30s
        monitor: 5s
        order: start-first
      labels:
        traefik.enable: "false"
    healthcheck:
      disable: true
    dns:
{% for dns_server in geokrety_dns_servers %}
      - {{ dns_server }}
{% endfor %}
    networks:
      default:
{% endif %}

{% if params.cdn is defined %}
  cdn:
    image: {{ geokrety_docker_image_cdn_image_name }}:{{ geokrety_docker_image_cdn_image_tag }}
    <<: *volumes-cdn
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
        order: start-first
      labels:
        traefik.enable: "true"
        traefik.docker.network: "traefik_default"
        traefik.frontend.rule: "Host:{{ params.cdn.uri | default(geokrety_params.cdn_uri) }}"
        traefik.frontend.passHostHeader: "true"
        traefik.protocol: "http"
        traefik.port: 80
        # traefik2
        traefik.http.routers.geokrety-{{ item }}-cdn.priority: 5
        traefik.http.routers.geokrety-{{ item }}-cdn.rule: "Host(`{{ params.cdn.uri | default(geokrety_params.cdn_uri) }}`)"
        traefik.http.routers.geokrety-{{ item }}-cdn.middlewares: X-Forwarded-Https@file
        traefik.http.services.geokrety-{{ item }}-cdn.loadbalancer.passhostheader: "true"
        traefik.http.services.geokrety-{{ item }}-cdn.loadbalancer.server.port: 80
      restart_policy:
        condition: any
    networks:
      default:
      traefik_default:
{% endif %}

{% if params.cron is defined %}
  cron:
    image: {{ geokrety_docker_image_cron_image_name }}:{{ geokrety_docker_image_cron_image_tag }}
{% if params.new_env_flag is defined and params.new_env_flag %}
    environment:
      GK_SITE_BASE_SERVER_URL: "https://{{ params.website.uri.0 }}"
{% else %}
    <<: *variables
    <<: *volumes-website
{% endif %}
    deploy:
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:
{% endif %}

{% if params.db.enable is defined and params.db.enable %}
  db:
    image: mariadb:10.1
    command:
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
      - "--character-set-client-handshake=false"
      - "--max-connections=800"
      - "--max_allowed_packet=1024M"
      - "--wait-timeout=28800"
      - "--innodb-buffer-pool-size=8G"
      - "--innodb-buffer-pool-instances=8"
    volumes:
      - {{ geokrety_base_dir }}/mysql:/var/lib/mysql:rw
      - /etc/localtime:/etc/localtime:ro
      # - {{ geokrety_home }}/instances/{{ item }}/dbdump/database.sql:/docker-entrypoint-initdb.d/database.sql:ro
    environment:
      TZ: {{ params.db.tz | default(params.tz | default(geokrety_tz)) }}
      MYSQL_ROOT_PASSWORD: {{ geokrety_org_mysql_root_password }}
      MYSQL_DATABASE: "{{ params.db.name | default(geokrety_params.db.name) }}"
      MYSQL_USER: "{{ params.db.user | default(geokrety_params.db.user) }}"
      MYSQL_PASSWORD: "{{ params.db.password | default(geokrety_params.db.password) }}"
    deploy:
      replicas: 1
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:
{% endif %}

{% if params.postgres.enabled is defined and params.postgres.enabled %}
  postgres:
    image: {{ geokrety_docker_image_postgres_image_name }}:{{ geokrety_docker_image_postgres_image_tag }}
    command:
      - "postgres"
{% if params.rabbitmq is defined %}
      - "-c"
      - "shared_preload_libraries=pg_amqp.so"
{% endif %}
    volumes:
      - {{ geokrety_base_dir }}/postgres:/var/lib/postgresql/data:rw
      - {{ geokrety_home }}/databases/srtm:/srtm:rw
      - /etc/localtime:/etc/localtime:ro
{% if params.website.localdir is defined %}
      - {{ params.website.localdir }}/website/db/dumps/:/docker-entrypoint-initdb.d/:ro
{% endif %}
    environment:
      TZ: {{ params.postgres.tz | default(params.tz | default(geokrety_tz)) }}
      POSTGRES_DB: "{{ params.postgres.name | default(geokrety_params.postgres.name) }}"
      POSTGRES_USER: "{{ params.postgres.user | default(geokrety_params.postgres.user) }}"
      POSTGRES_PASSWORD: "{{ params.postgres.password | default(geokrety_params.postgres.password) }}"
      POSTGIS_ENABLE_OUTDB_RASTERS: 1
      POSTGIS_GDAL_ENABLED_DRIVERS: ENABLE_ALL
{% if params.postgres.expose is defined %}
    ports:
      - target: 5432
        published: {{ params.postgres.expose }}
        protocol: tcp
        mode: host
{% endif %}
    deploy:
      replicas: 1
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:
{% endif %}

{% if params.adminer is defined %}
  adminer:
    image: adminer
{% if params.postgres.enable is defined and params.postgres.enable or params.db.enable is defined and params.db.enable %}
    depends_on:
{% if params.postgres.enable is defined and params.postgres.enable %}
      - postgres
{% endif %}
{% if params.db.enable is defined and params.db.enable %}
      - db
{% endif %}
{% endif %}
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: "traefik_default"
        traefik.frontend.rule: "Host:{{ params.website.uri | join(',') }}; PathPrefix:/adminer"
        traefik.frontend.passHostHeader: "true"
        traefik.protocol: "http"
        traefik.port: 8080
{% if params.adminer.auth_enable is defined and params.adminer.auth_enable %}
        traefik.frontend.auth.basic.users: "{{ geokrety_adminer_users | default([]) | join(',') }}"
{% endif %}
        # traefik2
        traefik.http.middlewares.auth-basic-geokrey-admins.basicauth.users: "{{ geokrety_adminer_users | default([]) | join(',') }}"
        traefik.http.routers.geokrety-{{ item }}-adminer.priority: 10
        traefik.http.routers.geokrety-{{ item }}-adminer.rule: "Host(`{{ params.website.uri[0] }}`) && PathPrefix(`/adminer`)"
        traefik.http.routers.geokrety-{{ item }}-adminer.middlewares: X-Forwarded-Https@file,auth-basic-geokrey-admins
        traefik.http.services.geokrety-{{ item }}-adminer.loadbalancer.passhostheader: "true"
        traefik.http.services.geokrety-{{ item }}-adminer.loadbalancer.server.port: 8080
      restart_policy:
        condition: any
    networks:
      default:
      traefik_default:
{% endif %}

{% if params.pgadmin is defined %}
  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - postgres
    environment:
      TZ: {{ params.tz | default(geokrety_tz) }}
      PGADMIN_DEFAULT_EMAIL: "{{ params.pgadmin.email }}"
      PGADMIN_DEFAULT_PASSWORD: "{{ params.pgadmin.password }}"
      SCRIPT_NAME: "/pgadmin"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: "traefik_default"
        traefik.frontend.rule: "Host:{{ params.website.uri | join(',') }}; PathPrefix:/pgadmin"
        traefik.frontend.passHostHeader: "true"
        traefik.protocol: "http"
        traefik.port: 80
        traefik.frontend.auth.basic.users: "{{ geokrety_adminer_users | default([]) | join(',') }}"
        # traefik2
        traefik.http.middlewares.auth-basic-geokrey-admins.basicauth.users: "{{ geokrety_adminer_users | default([]) | join(',') }}"
        traefik.http.routers.geokrety-{{ item }}-pgadmin.priority: 10
        traefik.http.routers.geokrety-{{ item }}-pgadmin.rule: "Host(`{{ params.website.uri[0] }}`) && PathPrefix(`/pgadmin`)"
        traefik.http.routers.geokrety-{{ item }}-pgadmin.middlewares: X-Forwarded-Https@file,auth-basic-geokrey-admins
        traefik.http.services.geokrety-{{ item }}-pgadmin.loadbalancer.passhostheader: "true"
        traefik.http.services.geokrety-{{ item }}-pgadmin.loadbalancer.server.port: 80
      restart_policy:
        condition: any
    networks:
      default:
      traefik_default:
{% endif %}

{% if params.rabbitmq is defined %}
  rabbitmq:
    image: rabbitmq:3.11-management
    hostname: gk-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER={{ params.rabbitmq.user }}
      - RABBITMQ_DEFAULT_PASS={{ params.rabbitmq.password }}
      - TZ={{ params.tz | default(geokrety_tz) }}
    volumes:
      - {{ geokrety_base_dir }}/rabbitmq:/var/lib/rabbitmq
{% if params.rabbitmq.expose is defined %}
    ports:
      - target: 5672
        published: {{ params.rabbitmq.expose }}
        protocol: tcp
        mode: host
{% endif %}
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: "traefik_default"
        traefik.frontend.rule: "Host:{{ params.rabbitmq.uri_external }}"
        traefik.frontend.passHostHeader: "true"
        traefik.protocol: "http"
        traefik.port: 15672
        # traefik.frontend.auth.basic.users: "{{ geokrety_adminer_users | default([]) | join(',') }}"
        # traefik2
        # traefik.http.middlewares.auth-basic-geokrey-admins.basicauth.users: "{{ geokrety_adminer_users | default([]) | join(',') }}"
        traefik.http.routers.geokrety-{{ item }}-rabbitmq.rule: "Host(`{{ params.rabbitmq.uri_external }}`)"
        traefik.http.routers.geokrety-{{ item }}-rabbitmq.middlewares: X-Forwarded-Https@file
        # traefik.http.routers.geokrety-{{ item }}-rabbitmq.middlewares: X-Forwarded-Https@file,auth-basic-geokrey-admins
        traefik.http.services.geokrety-{{ item }}-rabbitmq.loadbalancer.passhostheader: "true"
        traefik.http.services.geokrety-{{ item }}-rabbitmq.loadbalancer.server.port: 15672
      restart_policy:
        condition: any
    networks:
      default:
      traefik_default:
{% endif %}

{% if params.basex is defined %}
  basex:
    image: quodatum/basexhttp:basex-10.3
    environment:
      - BASEX_JVM=-Xmx3072m
      - TZ=Europe/Paris
    volumes:
      - {{ geokrety_base_dir }}/BaseXData:/srv/basex/data
      - {{ geokrety_base_dir }}/BaseXExports:/srv/basex/exports
{% if params.basex.expose is defined %}
    ports:
      - target: 1984
        published: {{ params.basex.expose }}
        protocol: tcp
        mode: host
{% endif %}
{% if params.basex.hosts is defined %}
    extra_hosts:
{% for item in params.basex.hosts %}
      - "{{ item.host }}:{{ item.ip }}"
{% endfor %}
{% endif %}
    deploy:
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:

  basex-amqp-sync:
    image: {{ geokrety_docker_image_basex_amqp_sync_image_name }}:{{ geokrety_docker_image_basex_amqp_sync_image_tag }}
    environment:
      - GK_BASEX_HOST={{ params.basex.host | default('basex') }}
      - GK_BASEX_PORT={{ params.basex.port | default(1984) }}
      - GK_BASEX_USER={{ params.basex.user }}
      - GK_BASEX_PASSWORD={{ params.basex.password }}
      - GK_RABBITMQ_HOST={{ params.rabbitmq.host | default('rabbitmq') }}
      - GK_RABBITMQ_PORT={{ params.rabbitmq.port | default(5672) }}
      - GK_RABBITMQ_USER={{ params.rabbitmq.user }}
      - GK_RABBITMQ_PASS={{ params.rabbitmq.password }}
      - GK_RABBITMQ_VHOST={{ params.rabbitmq.vhost | default('%2F') }}
      - GK_API_BASE_URL=https://{{ params.website.uri.0 }}
      - GK_API_RATE_LIMITS_BYPASS={{ params.rate_limits_bypass | default(geokrety_params.rate_limits_bypass) }}
      - GK_SITE_SESSION_SHORT_LIVED_TOKEN={{ params.website.short_lived_session_token | default(geokrety_params.short_lived_session_token) }}
{% if params.basex_amqp_sync.localdir is defined %}
    volumes:
      - {{ params.basex_amqp_sync.localdir }}/:/usr/src/app/
{% endif %}
    deploy:
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:
{% endif %}

{% if params.bootstrap_email is defined %}
  smtp-relay:
    image: juanluisbaptiste/postfix
    environment:
      SMTP_SERVER: bootstrap-email
      SMTP_PORT: 25
      SERVER_HOSTNAME: smtp-relay
      SMTP_HEADER_TAG: GK-smtp-relay
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
        order: start-first
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any

  bootstrap-email:
    image: {{ geokrety_docker_image_bootstrap_email_image_name }}:{{ geokrety_docker_image_bootstrap_email_image_tag }}
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
        order: start-first
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:
{% if params.bootstrap_email.localdir is defined %}
    volumes:
      - {{ params.bootstrap_email.localdir }}/src:/app
{% endif %}
    environment:
      BOOTSTRAP_EMAIL_RELAY_HOST: "{{ params.mail_smtp_host | default(geokrety_params.mail_smtp_host) }}"
      BOOTSTRAP_EMAIL_RELAY_PORT: "{{ params.mail_smtp_port | default(geokrety_params.mail_smtp_port) }}"
      BOOTSTRAP_EMAIL_RELAY_USERNAME: "{{ params.mail_username | default(geokrety_params.mail_username) }}"
      BOOTSTRAP_EMAIL_RELAY_PASSWORD: "{{ params.mail_password | default(geokrety_params.mail_password) }}"
      BOOTSTRAP_EMAIL_RELAY_TLS: "{{ params.mail_smtp_tls | default(geokrety_params.mail_smtp_tls) }}"
      BOOTSTRAP_EMAIL_RELAY_SSL: "{{ params.mail_smtp_ssl | default(geokrety_params.mail_smtp_ssl) }}"
      BOOTSTRAP_EMAIL_GW_HOSTS: "0.0.0.0"
      BOOTSTRAP_EMAIL_GW_PORTS: 25
      BOOTSTRAP_EMAIL_GW_INTERNATIONALIZATION: "true"
      BOOTSTRAP_EMAIL_GW_DEBUG: "true"
{% endif %}

{% if params.osm_static_maps is defined %}
  osm-static-maps:
    image: {{ geokrety_docker_image_osm_static_maps_image_name }}:{{ geokrety_docker_image_osm_static_maps_image_tag }}
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
        order: start-first
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:
    environment:
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
      PUPPETEER_EXECUTABLE_PATH: "/usr/bin/chromium"
{% endif %}

{% if params.redis is defined %}
  redis:
    image: redis:5
    deploy:
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:
{% endif %}

{% if params.minio is defined %}
  minio:
    image: minio/minio
    command:
      - "server"
      - "/data"
      - "--console-address"
      - ":9001"
    volumes:
      - {{ geokrety_base_dir }}/minio/:/data/
    environment:
      MINIO_ROOT_USER: {{ params.minio.access_key }}
      MINIO_ROOT_PASSWORD: {{ params.minio.secret_key }}
      CONSOLE_SECURE_TLS_REDIRECT: "off"
      MINIO_BROWSER_REDIRECT_URL: "https://console.{{ params.minio.uri_external }}"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: "traefik_default"
        traefik.svc.frontend.rule: "Host:{{ params.minio.uri_external }}"
        traefik.svc.frontend.passHostHeader: "true"
        traefik.svc.protocol: "http"
        traefik.svc.port: 9000
        traefik.console.frontend.rule: "Host:console.{{ params.minio.uri_external }}"
        traefik.console.frontend.passHostHeader: "true"
        traefik.console.protocol: "http"
        traefik.console.port: 9001
        # traefik2
        traefik.http.routers.geokrety-{{ item }}-minio-svc.rule: "Host(`{{ params.minio.uri_external }}`)"
        traefik.http.routers.geokrety-{{ item }}-minio-svc.service: geokrety-{{ item }}-minio-svc
        traefik.http.routers.geokrety-{{ item }}-minio-svc.middlewares: X-Forwarded-Https@file
        traefik.http.services.geokrety-{{ item }}-minio-svc.loadbalancer.passhostheader: "true"
        traefik.http.services.geokrety-{{ item }}-minio-svc.loadbalancer.server.port: 9000
        traefik.http.routers.geokrety-{{ item }}-minio-console.rule: "Host(`console.{{ params.minio.uri_external }}`)"
        traefik.http.routers.geokrety-{{ item }}-minio-console.service: geokrety-{{ item }}-minio-console
        traefik.http.routers.geokrety-{{ item }}-minio-console.middlewares: X-Forwarded-Https@file
        traefik.http.services.geokrety-{{ item }}-minio-console.loadbalancer.passhostheader: "true"
        traefik.http.services.geokrety-{{ item }}-minio-console.loadbalancer.server.port: 9001
      restart_policy:
        condition: any
    networks:
      traefik_default:
      default:
{% endif %}

{% if params.pictures_processor is defined %}
  pictures-downloader:
    image: {{ geokrety_docker_image_pictures_processor_downloader_image_name }}:{{ geokrety_docker_image_pictures_processor_downloader_image_tag }}
    environment:
      GK_MINIO_PICTURES_PROCESSOR_MINIO_ACCESS_KEY: {{ params.minio.pictures_processor_downloader_access_key }}
      GK_MINIO_PICTURES_PROCESSOR_MINIO_SECRET_KEY: {{ params.minio.pictures_processor_downloader_secret_key }}
      GK_MINIO_WEBHOOK_AUTH_TOKEN_PP_DOWNLOADER: "{{ params.minio.webhook_auth_token_pictures_processor_downloader }}"
      GK_AUTH_TOKEN_DROP_S3_FILE_UPLOAD_REQUEST: "{{ params.minio.auth_token_drop_s3_file_upload_request }}"
{% if params.sentry.dsn is defined or geokrety_params.sentry.dsn is defined %}
      SENTRY_DSN: "{{ params.sentry.dsn | default(geokrety_params.sentry.dsn) }}"
      SENTRY_ENV: "{{ params.sentry.env | default(geokrety_params.sentry.env) }}"
{% endif %}
{% if params.pictures_processor.localdir is defined %}
    volumes:
      - {{ params.pictures_processor.localdir }}/downloader/public/index.php:/var/www/html/index.php:ro
{% endif %}
    deploy:
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:

  pictures-uploader:
    image: {{ geokrety_docker_image_pictures_processor_uploader_image_name }}:{{ geokrety_docker_image_pictures_processor_uploader_image_tag }}
    environment:
      MINIO_ACCESS_KEY: {{ params.minio.access_key }}
      MINIO_SECRET_KEY: {{ params.minio.secret_key }}
      GK_MINIO_WEBHOOK_AUTH_TOKEN_PP_UPLOADER: "{{ params.minio.webhook_auth_token_pictures_processor_uploader }}"
{% if params.sentry.dsn is defined or geokrety_params.sentry.dsn is defined %}
      SENTRY_DSN: "{{ params.sentry.dsn | default(geokrety_params.sentry.dsn) }}"
      SENTRY_ENV: "{{ params.sentry.env | default(geokrety_params.sentry.env) }}"
{% endif %}
{% if params.pictures_processor.localdir is defined %}
    volumes:
      - {{ params.pictures_processor.localdir }}/uploader/public/index.php:/var/www/html/index.php:ro
{% endif %}
    deploy:
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:
{% endif %}

{% if params.svg_to_png is defined %}
  svg-to-png:
    image: {{ geokrety_docker_image_svg_to_png_image_name }}:{{ geokrety_docker_image_svg_to_png_image_tag }}
{% if params.svg_to_png.localdir is defined %}
    volumes:
      - {{ params.svg_to_png.localdir }}:/app
{% endif %}
{% if params.svg_to_png.expose is defined %}
    ports:
      - target: 8080
        published: {{ params.svg_to_png.expose }}
        protocol: tcp
        mode: host
{% endif %}
    deploy:
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      default:
{% endif %}

{% if params.monitoring is defined %}
  prometheus:
    image: {{ geokrety_docker_image_prometheus_image_name }}:{{ geokrety_docker_image_prometheus_image_tag }}
    command:
      - "--web.external-url=/prometheus"
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - {{ geokrety_base_dir }}/prometheus:/prometheus:rw
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: "traefik_default"
        traefik.frontend.rule: "Host:{{ params.website.uri[0] }}; PathPrefix:/prometheus"
        traefik.frontend.passHostHeader: "true"
        traefik.protocol: "http"
        traefik.port: 9090
        traefik.frontend.auth.basic.users: "{{ geokrety_adminer_users | default([]) | join(',') }}"
        # traefik2
        traefik.http.middlewares.auth-basic-geokrey-admins.basicauth.users: "{{ geokrety_adminer_users | default([]) | join(',') }}"
        traefik.http.routers.geokrety-{{ item }}-prometheus.priority: 10
        traefik.http.routers.geokrety-{{ item }}-prometheus.rule: "Host(`{{ params.website.uri[0] }}`) && PathPrefix(`/prometheus`)"
        traefik.http.routers.geokrety-{{ item }}-prometheus.middlewares: X-Forwarded-Https@file,auth-basic-geokrey-admins
        traefik.http.services.geokrety-{{ item }}-prometheus.loadbalancer.passhostheader: "true"
        traefik.http.services.geokrety-{{ item }}-prometheus.loadbalancer.server.port: 9090
      restart_policy:
        condition: any
    networks:
      traefik_default:
      default:

{% if params.monitoring.pushgateway is defined %}
  pushgateway:
    image: {{ params.monitoring.pushgateway.image | default('prom/pushgateway') }}:{{ params.monitoring.pushgateway.tag | default('latest') }}
    deploy:
      labels:
        traefik.enable: "false"
      restart_policy:
        condition: any
    networks:
      traefik_default:
      default:
{% endif %}

  grafana:
    image: {{ geokrety_docker_image_grafana_image_name }}:{{ geokrety_docker_image_grafana_image_tag }}
{% if params.monitoring.grafana.localdir is defined %}
    volumes:
      - {{ params.monitoring.grafana.localdir }}/files/conf/provisioning:/etc/grafana/provisioning:rw
{% endif %}
    environment:
      GF_SERVER_ROOT_URL: https://{{ params.website.uri | first }}/grafana
      GF_SERVER_SERVE_FROM_SUB_PATH: 'true'
      GF_SECURITY_ADMIN_PASSWORD: {{ params.monitoring.grafana.password }}
      GF_INSTALL_PLUGINS: 'natel-discrete-panel'
{% for conf in params.monitoring.grafana.env %}
      {{ conf.k }}: {{ conf.v }}
{% endfor %}
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: "traefik_default"
        traefik.frontend.rule: "Host:{{ params.website.uri | join(',') }}; PathPrefixStrip:/grafana"
        traefik.frontend.passHostHeader: "true"
        traefik.protocol: "http"
        traefik.port: 3000
        # traefik2
        traefik.http.middlewares.geokrety-{{ item }}-grafana-remove-auth-header.headers.customrequestheaders.Authorization: ""
        traefik.http.routers.geokrety-{{ item }}-grafana.rule: "Host(`{{ params.website.uri[0] }}`) && PathPrefix(`/grafana`)"
        traefik.http.routers.geokrety-{{ item }}-grafana.middlewares: "X-Forwarded-Https@file,geokrety-{{ item }}-grafana-remove-auth-header"
        traefik.http.routers.geokrety-{{ item }}-grafana.priority: 10
        traefik.http.services.geokrety-{{ item }}-grafana.loadbalancer.passhostheader: "true"
        traefik.http.services.geokrety-{{ item }}-grafana.loadbalancer.server.port: 3000
      restart_policy:
        condition: any
    networks:
      traefik_default:
      default:
{% endif %}

{#{% if params.accounts_cleaner is defined %}#}
{#  accounts-cleaner:#}
{#    image: {{ geokrety_docker_image_accounts_cleaner_name }}:{{ item }}#}
{#    <<: *variables#}
{#{% if 'localdir' in params.accounts_cleaner.keys() %}#}
{#    volumes:#}
{#      - {{ params.accounts_cleaner.localdir }}:/var/www/geokrety#}
{#{% endif %}#}
{#    deploy:#}
{#      replicas: 1#}
{#      update_config:#}
{#        parallelism: 1#}
{#        delay: 30s#}
{#        monitor: 60s#}
{#        order: start-first#}
{#      labels:#}
{#        traefik.enable: "true"#}
{#        traefik.docker.network: "traefik_default"#}
{#        traefik.frontend.rule: "Host:{{ params.accounts_cleaner.uri | join(',') }}"#}
{#        traefik.frontend.passHostHeader: "true"#}
{#        traefik.protocol: "http"#}
{#        traefik.port: 80#}
{#        # traefik2#}
{#        traefik.http.routers.geokrety-{{ item }}-accounts-cleaner.rule: "Host(`{{ params.accounts_cleaner.uri | join(',') }}`)"#}
{#        traefik.http.routers.geokrety-{{ item }}-accounts-cleaner.middlewares: X-Forwarded-Https@file#}
{#        traefik.http.services.geokrety-{{ item }}-accounts-cleaner.loadbalancer.passhostheader: "true"#}
{#        traefik.http.services.geokrety-{{ item }}-accounts-cleaner.loadbalancer.server.port: 80#}
{#      restart_policy:#}
{#        condition: any#}
{#    networks:#}
{#      default:#}
{#      traefik_default:#}
{#{% endif %}#}

networks:
  default:
    attachable: true
  traefik_default:
    external: true

secrets:
{% for secret_name in geokrety_docker_secrets %}
  {{ item }}__{{ secret_name }}:
    external: true
{% endfor %}